{"ast":null,"code":"import { Field } from '../models/Field';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class positionService {\n  constructor(http) {\n    this.http = http;\n  }\n  // jobsList: Job[] = []\n  getJobsFromServer() {\n    return this.http.get(`https://localhost:7193/jobs/GetAllJobs`);\n  }\n  getJobFromServer(JobId) {\n    return this.http.get(`https://localhost:7193/jobs/GetJob?id=${JobId}`);\n  }\n  updateUserJobsSentCV(UserId, jobName) {\n    return this.http.put(`https://localhost:7193/users/updateJobsSentCV?id=${UserId}&jobName=${jobName}`, null);\n  }\n  filterJobs(field, area) {\n    let filterList;\n    return new Promise(resolve => this.getJobsFromServer().subscribe(res => {\n      console.log(res);\n      filterList = res.filter(job => (field === 'all' || Field[job.jobField].toLowerCase() === field) && (area === 'all' || job.area === area));\n      console.log(filterList);\n      resolve(filterList);\n    }));\n  }\n  getFields() {\n    return Object.values(Field).filter(field => Number.isNaN(Number(field)));\n  }\n  getAreas() {\n    return this.http.get(`https://localhost:7193/jobs/GetAreas`);\n  }\n  static #_ = this.ɵfac = function positionService_Factory(t) {\n    return new (t || positionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: positionService,\n    factory: positionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Field","positionService","constructor","http","getJobsFromServer","get","getJobFromServer","JobId","updateUserJobsSentCV","UserId","jobName","put","filterJobs","field","area","filterList","Promise","resolve","subscribe","res","console","log","filter","job","jobField","toLowerCase","getFields","Object","values","Number","isNaN","getAreas","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["Z:\\B\\בניהו שושנה\\AngularProject\\AngularProject\\jobSearch_client\\src\\app\\services\\position.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http'\r\nimport { Injectable, Type } from '@angular/core';\r\nimport { Job } from '../models/Job';\r\nimport { Field } from '../models/Field';\r\nimport { Observable, concatWith } from 'rxjs';\r\nimport { loginService } from './login.service';\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class positionService {\r\n    constructor(private http: HttpClient) {\r\n\r\n    }\r\n\r\n    // jobsList: Job[] = []\r\n\r\n    getJobsFromServer(): Observable<Job[]> {\r\n        return this.http.get<Job[]>(`https://localhost:7193/jobs/GetAllJobs`)\r\n    }\r\n\r\n    getJobFromServer(JobId: number): Observable<Job> {\r\n        return this.http.get<Job>(`https://localhost:7193/jobs/GetJob?id=${JobId}`)\r\n    }\r\n\r\n    updateUserJobsSentCV(UserId: number, jobName: string): Observable<any> {\r\n        return this.http.put(`https://localhost:7193/users/updateJobsSentCV?id=${UserId}&jobName=${jobName}`, null)\r\n    }\r\n\r\n    filterJobs(field: string, area: string) {\r\n        let filterList\r\n        return new Promise((resolve)=>\r\n            this.getJobsFromServer().subscribe(\r\n                (res: Job[]) => {\r\n                        console.log(res);\r\n                        filterList = res.filter(job =>\r\n                            (field === 'all' || Field[job.jobField].toLowerCase() === field) &&\r\n                            (area === 'all' || job.area === area)\r\n                        )\r\n                        console.log(filterList);\r\n                        resolve(filterList) ;\r\n                    },\r\n                 \r\n                )\r\n            \r\n        )\r\n\r\n    }\r\n    getFields() {\r\n        return Object.values(Field).filter(field => Number.isNaN(Number(field)));\r\n    }\r\n    getAreas() {\r\n        return this.http.get(`https://localhost:7193/jobs/GetAreas`)\r\n    }\r\n}\r\n\r\n\r\n\r\n"],"mappings":"AAGA,SAASA,KAAK,QAAQ,iBAAiB;;;AAOvC,OAAM,MAAOC,eAAe;EACxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAExB;EAEA;EAEAC,iBAAiBA,CAAA;IACb,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAQ,wCAAwC,CAAC;EACzE;EAEAC,gBAAgBA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAM,yCAAyCE,KAAK,EAAE,CAAC;EAC/E;EAEAC,oBAAoBA,CAACC,MAAc,EAAEC,OAAe;IAChD,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,oDAAoDF,MAAM,YAAYC,OAAO,EAAE,EAAE,IAAI,CAAC;EAC/G;EAEAE,UAAUA,CAACC,KAAa,EAAEC,IAAY;IAClC,IAAIC,UAAU;IACd,OAAO,IAAIC,OAAO,CAAEC,OAAO,IACvB,IAAI,CAACb,iBAAiB,EAAE,CAACc,SAAS,CAC7BC,GAAU,IAAI;MACPC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChBJ,UAAU,GAAGI,GAAG,CAACG,MAAM,CAACC,GAAG,IACvB,CAACV,KAAK,KAAK,KAAK,IAAIb,KAAK,CAACuB,GAAG,CAACC,QAAQ,CAAC,CAACC,WAAW,EAAE,KAAKZ,KAAK,MAC9DC,IAAI,KAAK,KAAK,IAAIS,GAAG,CAACT,IAAI,KAAKA,IAAI,CAAC,CACxC;MACDM,OAAO,CAACC,GAAG,CAACN,UAAU,CAAC;MACvBE,OAAO,CAACF,UAAU,CAAC;IACvB,CAAC,CAEJ,CAER;EAEL;EACAW,SAASA,CAAA;IACL,OAAOC,MAAM,CAACC,MAAM,CAAC5B,KAAK,CAAC,CAACsB,MAAM,CAACT,KAAK,IAAIgB,MAAM,CAACC,KAAK,CAACD,MAAM,CAAChB,KAAK,CAAC,CAAC,CAAC;EAC5E;EACAkB,QAAQA,CAAA;IACJ,OAAO,IAAI,CAAC5B,IAAI,CAACE,GAAG,CAAC,sCAAsC,CAAC;EAChE;EAAC,QAAA2B,CAAA,G;qBA3CQ/B,eAAe,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfpC,eAAe;IAAAqC,OAAA,EAAfrC,eAAe,CAAAsC,IAAA;IAAAC,UAAA,EAHZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}