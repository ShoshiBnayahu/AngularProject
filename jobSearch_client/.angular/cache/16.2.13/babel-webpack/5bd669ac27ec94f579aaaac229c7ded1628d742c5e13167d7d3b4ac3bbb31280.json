{"ast":null,"code":"import { Field } from '../models/Field';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class positionService {\n  constructor(http) {\n    this.http = http;\n    this.jobsList = [];\n    this.getJobsFromServer();\n  }\n  getJobsFromServer() {\n    this.http.get(`https://localhost:7193/jobs/GetAllJobs`).subscribe(res => {\n      res.forEach(job => {\n        this.jobsList.push(job);\n      });\n    });\n  }\n  getJobFromServer(JobId) {\n    return this.http.get(`https://localhost:7193/jobs/GetJob?id=${JobId}`);\n  }\n  updateUserJobsSentCV(UserId, jobName) {\n    return this.http.put(`https://localhost:7193/users/updateJobsSentCV?id=${UserId}&jobName=${jobName}`, null);\n  }\n  filterJobs(field, area) {\n    console.log(field, area);\n    t;\n    let filterList = this.getJobsList.filter(job => (field == undefined || field == Field[Field.ALL].toLowerCase() || Field[job.jobField].toLowerCase() == field) && (area == null || area == 'all' || job.area == area));\n    // console.log(this.getJobsList);\n    // console.log(filterList);\n    return this.jobsList;\n    // return this.jobsList\n  }\n\n  get getJobsList() {\n    return this.jobsList;\n  }\n  getFields() {\n    return Object.values(Field).filter(field => Number.isNaN(Number(field)));\n  }\n  getAreas() {\n    return this.http.get(`https://localhost:7193/jobs/GetAreas`);\n  }\n  static #_ = this.ɵfac = function positionService_Factory(t) {\n    return new (t || positionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: positionService,\n    factory: positionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Field","positionService","constructor","http","jobsList","getJobsFromServer","get","subscribe","res","forEach","job","push","getJobFromServer","JobId","updateUserJobsSentCV","UserId","jobName","put","filterJobs","field","area","console","log","t","filterList","getJobsList","filter","undefined","ALL","toLowerCase","jobField","getFields","Object","values","Number","isNaN","getAreas","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["Z:\\B\\בניהו שושנה\\AngularProject\\AngularProject\\jobSearch_client\\src\\app\\services\\position.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http'\r\nimport { Injectable, Type } from '@angular/core';\r\nimport { Job } from '../models/Job';\r\nimport { Field } from '../models/Field';\r\nimport { Observable } from 'rxjs';\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class positionService {\r\n    constructor(private http: HttpClient) {\r\n        this.getJobsFromServer();\r\n    }\r\n\r\n    jobsList: Job[] = []\r\n\r\n    getJobsFromServer() {\r\n        this.http.get(`https://localhost:7193/jobs/GetAllJobs`).subscribe((res: any) => {\r\n            res.forEach((job: any) => {\r\n                this.jobsList.push(job)\r\n            })\r\n        });\r\n    }\r\n\r\n    getJobFromServer(JobId: number): Observable<any> {\r\n        return this.http.get(`https://localhost:7193/jobs/GetJob?id=${JobId}`)\r\n    }\r\n\r\n    updateUserJobsSentCV(UserId: number,jobName:string): Observable<any> {\r\n        return this.http.put(`https://localhost:7193/users/updateJobsSentCV?id=${UserId}&jobName=${jobName}`,null)\r\n    }\r\n\r\n    filterJobs(field: string | undefined, area: string | null) {\r\n        console.log(field, area); \r\n        t\r\n        let filterList =this.getJobsList.filter(job => \r\n            (field == undefined || (field == Field[Field.ALL].toLowerCase()) || Field[job.jobField].toLowerCase() == field) &&\r\n                (area ==null || area == 'all' || job.area ==area)\r\n        )\r\n        // console.log(this.getJobsList);\r\n        // console.log(filterList);\r\n\r\n\r\n        return this.jobsList\r\n        // return this.jobsList\r\n    }\r\n\r\n    public get getJobsList() {\r\n        return this.jobsList\r\n    }\r\n\r\n    getFields() {\r\n        return Object.values(Field).filter(field => Number.isNaN(Number(field)));\r\n    }\r\n    getAreas() {\r\n        return this.http.get(`https://localhost:7193/jobs/GetAreas`) \r\n    }\r\n}\r\n\r\n\r\n\r\n"],"mappings":"AAGA,SAASA,KAAK,QAAQ,iBAAiB;;;AAMvC,OAAM,MAAOC,eAAe;EACxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAIxB,KAAAC,QAAQ,GAAU,EAAE;IAHhB,IAAI,CAACC,iBAAiB,EAAE;EAC5B;EAIAA,iBAAiBA,CAAA;IACb,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,wCAAwC,CAAC,CAACC,SAAS,CAAEC,GAAQ,IAAI;MAC3EA,GAAG,CAACC,OAAO,CAAEC,GAAQ,IAAI;QACrB,IAAI,CAACN,QAAQ,CAACO,IAAI,CAACD,GAAG,CAAC;MAC3B,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EAEAE,gBAAgBA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAC,yCAAyCO,KAAK,EAAE,CAAC;EAC1E;EAEAC,oBAAoBA,CAACC,MAAc,EAACC,OAAc;IAC9C,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAC,oDAAoDF,MAAM,YAAYC,OAAO,EAAE,EAAC,IAAI,CAAC;EAC9G;EAEAE,UAAUA,CAACC,KAAyB,EAAEC,IAAmB;IACrDC,OAAO,CAACC,GAAG,CAACH,KAAK,EAAEC,IAAI,CAAC;IACxBG,CAAC;IACD,IAAIC,UAAU,GAAE,IAAI,CAACC,WAAW,CAACC,MAAM,CAAChB,GAAG,IACvC,CAACS,KAAK,IAAIQ,SAAS,IAAKR,KAAK,IAAInB,KAAK,CAACA,KAAK,CAAC4B,GAAG,CAAC,CAACC,WAAW,EAAG,IAAI7B,KAAK,CAACU,GAAG,CAACoB,QAAQ,CAAC,CAACD,WAAW,EAAE,IAAIV,KAAK,MACzGC,IAAI,IAAG,IAAI,IAAIA,IAAI,IAAI,KAAK,IAAIV,GAAG,CAACU,IAAI,IAAGA,IAAI,CAAC,CACxD;IACD;IACA;IAGA,OAAO,IAAI,CAAChB,QAAQ;IACpB;EACJ;;EAEA,IAAWqB,WAAWA,CAAA;IAClB,OAAO,IAAI,CAACrB,QAAQ;EACxB;EAEA2B,SAASA,CAAA;IACL,OAAOC,MAAM,CAACC,MAAM,CAACjC,KAAK,CAAC,CAAC0B,MAAM,CAACP,KAAK,IAAIe,MAAM,CAACC,KAAK,CAACD,MAAM,CAACf,KAAK,CAAC,CAAC,CAAC;EAC5E;EACAiB,QAAQA,CAAA;IACJ,OAAO,IAAI,CAACjC,IAAI,CAACG,GAAG,CAAC,sCAAsC,CAAC;EAChE;EAAC,QAAA+B,CAAA,G;qBA/CQpC,eAAe,EAAAqC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfzC,eAAe;IAAA0C,OAAA,EAAf1C,eAAe,CAAA2C,IAAA;IAAAC,UAAA,EAHZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}