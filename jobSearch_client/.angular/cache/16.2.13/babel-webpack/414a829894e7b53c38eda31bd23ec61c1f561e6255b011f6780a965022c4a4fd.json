{"ast":null,"code":"import { Field } from '../models/Field';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class positionService {\n  constructor(http) {\n    this.http = http;\n  }\n  // jobsList: Job[] = []\n  getJobsFromServer() {\n    return this.http.get(`https://localhost:7193/jobs/GetAllJobs`);\n  }\n  getJobFromServer(JobId) {\n    return this.http.get(`https://localhost:7193/jobs/GetJob?id=${JobId}`);\n  }\n  updateUserJobsSentCV(UserId, jobName) {\n    return this.http.put(`https://localhost:7193/users/updateJobsSentCV?id=${UserId}&jobName=${jobName}`, null);\n  }\n  filterJobs(field, area) {\n    console.log(field, area);\n    let filterList;\n    this.getJobsFromServer().subscribe({\n      next: res => {\n        console.log(res);\n        filterList = res.filter(job => (field === 'all' || Field[job.jobField].toLowerCase() === field) && (area === 'all' || job.area === area));\n        console.log(filterList);\n        return filterList;\n      },\n      error: error => {\n        console.log('error fetching jobs from server ', error);\n        return null;\n      }\n    });\n    console.log(filterList);\n    return filterList;\n  }\n  // public get getJobsList() {\n  //     return this.jobsList\n  // }\n  getFields() {\n    return Object.values(Field).filter(field => Number.isNaN(Number(field)));\n  }\n  getAreas() {\n    return this.http.get(`https://localhost:7193/jobs/GetAreas`);\n  }\n  static #_ = this.ɵfac = function positionService_Factory(t) {\n    return new (t || positionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: positionService,\n    factory: positionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Field","positionService","constructor","http","getJobsFromServer","get","getJobFromServer","JobId","updateUserJobsSentCV","UserId","jobName","put","filterJobs","field","area","console","log","filterList","subscribe","next","res","filter","job","jobField","toLowerCase","error","getFields","Object","values","Number","isNaN","getAreas","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["Z:\\B\\בניהו שושנה\\AngularProject\\AngularProject\\jobSearch_client\\src\\app\\services\\position.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http'\r\nimport { Injectable, Type } from '@angular/core';\r\nimport { Job } from '../models/Job';\r\nimport { Field } from '../models/Field';\r\nimport { Observable, concatWith } from 'rxjs';\r\nimport { loginService } from './login.service';\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class positionService {\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    // jobsList: Job[] = []\r\n\r\n    getJobsFromServer() : Observable<any>{\r\n         return this.http.get(`https://localhost:7193/jobs/GetAllJobs`)\r\n    }\r\n\r\n    getJobFromServer(JobId: number): Observable<any> {\r\n        return this.http.get(`https://localhost:7193/jobs/GetJob?id=${JobId}`)\r\n    }\r\n\r\n    updateUserJobsSentCV(UserId: number,jobName:string): Observable<any> {\r\n        return this.http.put(`https://localhost:7193/users/updateJobsSentCV?id=${UserId}&jobName=${jobName}`,null)\r\n    }\r\n\r\n      filterJobs(field: string , area: string ):Observable<any> {\r\n        console.log(field, area); \r\n        \r\n        let filterList\r\n         this.getJobsFromServer().subscribe({\r\n            next: (res: Job[]) => {\r\n                console.log(res);\r\n                \r\n                filterList=res.filter(job => \r\n                    (field==='all' || Field[job.jobField].toLowerCase() === field) &&\r\n                        ( area === 'all' || job.area ===area)\r\n                )\r\n                console.log(filterList); \r\n           return filterList \r\n            },\r\n            error: (error) => {\r\n                console.log('error fetching jobs from server ',error);\r\n                return null\r\n            }\r\n\r\n          })\r\n          console.log(filterList);\r\n          return filterList\r\n      \r\n    }\r\n\r\n    // public get getJobsList() {\r\n    //     return this.jobsList\r\n    // }\r\n\r\n    getFields() {\r\n        return Object.values(Field).filter(field => Number.isNaN(Number(field)));\r\n    }\r\n    getAreas() {\r\n        return this.http.get(`https://localhost:7193/jobs/GetAreas`) \r\n    }\r\n}\r\n\r\n\r\n\r\n"],"mappings":"AAGA,SAASA,KAAK,QAAQ,iBAAiB;;;AAOvC,OAAM,MAAOC,eAAe;EACxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EACxB;EAEA;EAEAC,iBAAiBA,CAAA;IACZ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,wCAAwC,CAAC;EACnE;EAEAC,gBAAgBA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAC,yCAAyCE,KAAK,EAAE,CAAC;EAC1E;EAEAC,oBAAoBA,CAACC,MAAc,EAACC,OAAc;IAC9C,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,oDAAoDF,MAAM,YAAYC,OAAO,EAAE,EAAC,IAAI,CAAC;EAC9G;EAEEE,UAAUA,CAACC,KAAa,EAAGC,IAAY;IACrCC,OAAO,CAACC,GAAG,CAACH,KAAK,EAAEC,IAAI,CAAC;IAExB,IAAIG,UAAU;IACb,IAAI,CAACb,iBAAiB,EAAE,CAACc,SAAS,CAAC;MAChCC,IAAI,EAAGC,GAAU,IAAI;QACjBL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;QAEhBH,UAAU,GAACG,GAAG,CAACC,MAAM,CAACC,GAAG,IACrB,CAACT,KAAK,KAAG,KAAK,IAAIb,KAAK,CAACsB,GAAG,CAACC,QAAQ,CAAC,CAACC,WAAW,EAAE,KAAKX,KAAK,MACvDC,IAAI,KAAK,KAAK,IAAIQ,GAAG,CAACR,IAAI,KAAIA,IAAI,CAAC,CAC5C;QACDC,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;QAC5B,OAAOA,UAAU;MAChB,CAAC;MACDQ,KAAK,EAAGA,KAAK,IAAI;QACbV,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAACS,KAAK,CAAC;QACrD,OAAO,IAAI;MACf;KAED,CAAC;IACFV,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;IACvB,OAAOA,UAAU;EAEvB;EAEA;EACA;EACA;EAEAS,SAASA,CAAA;IACL,OAAOC,MAAM,CAACC,MAAM,CAAC5B,KAAK,CAAC,CAACqB,MAAM,CAACR,KAAK,IAAIgB,MAAM,CAACC,KAAK,CAACD,MAAM,CAAChB,KAAK,CAAC,CAAC,CAAC;EAC5E;EACAkB,QAAQA,CAAA;IACJ,OAAO,IAAI,CAAC5B,IAAI,CAACE,GAAG,CAAC,sCAAsC,CAAC;EAChE;EAAC,QAAA2B,CAAA,G;qBArDQ/B,eAAe,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfpC,eAAe;IAAAqC,OAAA,EAAfrC,eAAe,CAAAsC,IAAA;IAAAC,UAAA,EAHZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}