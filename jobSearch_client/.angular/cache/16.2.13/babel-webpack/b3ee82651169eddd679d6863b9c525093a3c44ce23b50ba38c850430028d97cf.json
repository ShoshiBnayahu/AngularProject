{"ast":null,"code":"import { Field } from '../models/Field';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class positionService {\n  constructor(http) {\n    this.http = http;\n  }\n  // jobsList: Job[] = []\n  getJobsFromServer() {\n    return this.http.get(`https://localhost:7193/jobs/GetAllJobs`);\n  }\n  getJobFromServer(JobId) {\n    return this.http.get(`https://localhost:7193/jobs/GetJob?id=${JobId}`);\n  }\n  updateUserJobsSentCV(UserId, jobName) {\n    return this.http.put(`https://localhost:7193/users/updateJobsSentCV?id=${UserId}&jobName=${jobName}`, null);\n  }\n  filterJobs(field, area) {\n    console.log(field, area);\n    let filterList;\n    return new Promise(this.getJobsFromServer().subscribe({\n      next: res => {\n        console.log(res);\n        filterList = res.filter(job => (field === 'all' || Field[job.jobField].toLowerCase() === field) && (area === 'all' || job.area === area));\n        return filterList;\n      },\n      error: error => {\n        console.log('error fetching jobs from server ', error);\n      }\n    }));\n    // console.log(filterList);\n    // return filterList\n  }\n\n  getFields() {\n    return Object.values(Field).filter(field => Number.isNaN(Number(field)));\n  }\n  getAreas() {\n    return this.http.get(`https://localhost:7193/jobs/GetAreas`);\n  }\n  static #_ = this.ɵfac = function positionService_Factory(t) {\n    return new (t || positionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: positionService,\n    factory: positionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Field","positionService","constructor","http","getJobsFromServer","get","getJobFromServer","JobId","updateUserJobsSentCV","UserId","jobName","put","filterJobs","field","area","console","log","filterList","Promise","subscribe","next","res","filter","job","jobField","toLowerCase","error","getFields","Object","values","Number","isNaN","getAreas","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["Z:\\B\\בניהו שושנה\\AngularProject\\AngularProject\\jobSearch_client\\src\\app\\services\\position.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http'\r\nimport { Injectable, Type } from '@angular/core';\r\nimport { Job } from '../models/Job';\r\nimport { Field } from '../models/Field';\r\nimport { Observable, concatWith } from 'rxjs';\r\nimport { loginService } from './login.service';\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class positionService {\r\n    constructor(private http: HttpClient) {\r\n\r\n    }\r\n\r\n    // jobsList: Job[] = []\r\n\r\n    getJobsFromServer(): Observable<Job[]> {\r\n        return this.http.get<Job[]>(`https://localhost:7193/jobs/GetAllJobs`)\r\n    }\r\n\r\n    getJobFromServer(JobId: number): Observable<Job> {\r\n        return this.http.get<Job>(`https://localhost:7193/jobs/GetJob?id=${JobId}`)\r\n    }\r\n\r\n    updateUserJobsSentCV(UserId: number, jobName: string): Observable<any> {\r\n        return this.http.put(`https://localhost:7193/users/updateJobsSentCV?id=${UserId}&jobName=${jobName}`, null)\r\n    }\r\n\r\n    filterJobs(field: string, area: string) {\r\n        console.log(field, area);\r\n        let filterList\r\n     return   new Promise(    this.getJobsFromServer().subscribe(\r\n            {\r\n                next: (res: Job[]) => {\r\n                    console.log(res);\r\n                    filterList = res.filter(job =>\r\n                        (field === 'all' || Field[job.jobField].toLowerCase() === field) &&\r\n                        (area === 'all' || job.area === area)\r\n                    )\r\n                    return filterList\r\n                },\r\n                error: (error) => {\r\n                    console.log('error fetching jobs from server ', error);\r\n\r\n                }\r\n\r\n            })\r\n        // console.log(filterList);\r\n        // return filterList\r\n\r\n    }\r\n    getFields() {\r\n        return Object.values(Field).filter(field => Number.isNaN(Number(field)));\r\n    }\r\n    getAreas() {\r\n        return this.http.get(`https://localhost:7193/jobs/GetAreas`)\r\n    }\r\n}\r\n\r\n\r\n\r\n"],"mappings":"AAGA,SAASA,KAAK,QAAQ,iBAAiB;;;AAOvC,OAAM,MAAOC,eAAe;EACxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAExB;EAEA;EAEAC,iBAAiBA,CAAA;IACb,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAQ,wCAAwC,CAAC;EACzE;EAEAC,gBAAgBA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAM,yCAAyCE,KAAK,EAAE,CAAC;EAC/E;EAEAC,oBAAoBA,CAACC,MAAc,EAAEC,OAAe;IAChD,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,oDAAoDF,MAAM,YAAYC,OAAO,EAAE,EAAE,IAAI,CAAC;EAC/G;EAEAE,UAAUA,CAACC,KAAa,EAAEC,IAAY;IAClCC,OAAO,CAACC,GAAG,CAACH,KAAK,EAAEC,IAAI,CAAC;IACxB,IAAIG,UAAU;IACjB,OAAS,IAAIC,OAAO,CAAK,IAAI,CAACd,iBAAiB,EAAE,CAACe,SAAS,CACpD;MACIC,IAAI,EAAGC,GAAU,IAAI;QACjBN,OAAO,CAACC,GAAG,CAACK,GAAG,CAAC;QAChBJ,UAAU,GAAGI,GAAG,CAACC,MAAM,CAACC,GAAG,IACvB,CAACV,KAAK,KAAK,KAAK,IAAIb,KAAK,CAACuB,GAAG,CAACC,QAAQ,CAAC,CAACC,WAAW,EAAE,KAAKZ,KAAK,MAC9DC,IAAI,KAAK,KAAK,IAAIS,GAAG,CAACT,IAAI,KAAKA,IAAI,CAAC,CACxC;QACD,OAAOG,UAAU;MACrB,CAAC;MACDS,KAAK,EAAGA,KAAK,IAAI;QACbX,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEU,KAAK,CAAC;MAE1D;KAEH,CAAC;IACN;IACA;EAEJ;;EACAC,SAASA,CAAA;IACL,OAAOC,MAAM,CAACC,MAAM,CAAC7B,KAAK,CAAC,CAACsB,MAAM,CAACT,KAAK,IAAIiB,MAAM,CAACC,KAAK,CAACD,MAAM,CAACjB,KAAK,CAAC,CAAC,CAAC;EAC5E;EACAmB,QAAQA,CAAA;IACJ,OAAO,IAAI,CAAC7B,IAAI,CAACE,GAAG,CAAC,sCAAsC,CAAC;EAChE;EAAC,QAAA4B,CAAA,G;qBA/CQhC,eAAe,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfrC,eAAe;IAAAsC,OAAA,EAAftC,eAAe,CAAAuC,IAAA;IAAAC,UAAA,EAHZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}